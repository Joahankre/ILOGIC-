' EXPORTACAO DE ARQUIVO IGES COM FORMATAÇÃO DE NOME DE ARQUIVO

' Obter o documento de desenho ativo
Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument

' Verificar se o documento é um desenho
If oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then
    Return
End If

' Exibir uma caixa de entrada para o prefixo do nome do arquivo
Dim prefixo As String = InputBox("Insira o prefixo para o nome do arquivo IGES:", "Inserir Prefixo")

' Verificar se o prefixo não está vazio
If String.IsNullOrEmpty(prefixo) Then
    Return
End If

' Caminho do diretório onde os arquivos IGES serão salvos
Dim outputFolder As String = "C:\Users\PC\Desktop\Nova pasta"  ' Altere para o diretório desejado

' Verificar se o diretório existe
If Not System.IO.Directory.Exists(outputFolder) Then
    ' Criar o diretório caso não exista
    System.IO.Directory.CreateDirectory(outputFolder)
End If

' Obter o tradutor IGES
Dim oIGESTranslator As TranslatorAddIn = ThisApplication.ApplicationAddIns.ItemById("{90AF7F44-0C01-11D5-8E83-0010B541CD80}")

If oIGESTranslator Is Nothing Then
    Return
End If

' Criar contexto de tradução e mapa de opções
Dim oContext As TranslationContext = ThisApplication.TransientObjects.CreateTranslationContext
Dim oOptions As NameValueMap = ThisApplication.TransientObjects.CreateNameValueMap

' Iterar sobre todas as folhas do desenho
For Each drawSheet As Sheet In oDoc.Sheets
    ' Iterar sobre todas as vistas de desenho nas folhas
    For Each drawingView As DrawingView In drawSheet.DrawingViews
        ' Verificar se o DrawingView tem um documento de modelo associado
        If DrawingView.ReferencedDocumentDescriptor IsNot Nothing Then
            Dim oModel As Document = DrawingView.ReferencedDocumentDescriptor.ReferencedDocument
            If oModel IsNot Nothing Then
                ' Verificar se o modelo é uma peça (IPT) e foi criado com o Frame Generator
                If oModel.DocumentType = DocumentTypeEnum.kPartDocumentObject Then
                    ' A peça foi criada com o Frame Generator
                    If oModel.DocumentInterests.HasInterest("{AC211AE0-A7A5-4589-916D-81C529DA6D17}") Then
                        ' Continue o processo sem exibir a caixa de diálogo
                        ' Captura o número da página da folha e formata como 3 dígitos
                        Dim sheetName As String = drawSheet.Name
                        Dim pageNumber As String = sheetName.Substring(sheetName.LastIndexOf(":") + 1)
                        Dim formattedPageNumber As String = ""

                        If pageNumber.Length <= 3 Then
                            formattedPageNumber = pageNumber.PadLeft(3, "0"c)  ' Formata números de 1 a 9 como 001, 002, etc.
                        Else
                            formattedPageNumber = pageNumber ' Mantém números de centenas como estão
                        End If

                        ' Extrair dimensões do tubo
                        Dim dimensionPattern As String = "\d+x\d+x\d+(\.\d+)?"  ' Expressão regular para capturar as dimensões
                        Dim regex As New System.Text.RegularExpressions.Regex(dimensionPattern)
                        Dim match As System.Text.RegularExpressions.Match = regex.Match(oModel.DisplayName)

                        Dim tubeDimensions As String = ""

                        If match.Success Then
                            ' Extrai as dimensões encontradas e remove o "x"
                            Dim dimensionStr As String = match.Value.Replace("x", "")  ' Remove o separador "x"

                            ' Remover a parte decimal, se existir (para garantir que as dimensões sejam inteiras)
                            If dimensionStr.Contains(".") Then
                                dimensionStr = dimensionStr.Substring(0, dimensionStr.IndexOf("."))
                            End If

                            ' Definir as dimensões formatadas para o nome do arquivo
                            tubeDimensions = dimensionStr ' Exemplo: 1006010 para 100 x 60 x 1
                        End If

                        ' Extrair a quantidade personalizada (QTDE)
                        Dim customQuantity As String = ""
                        Try
                            customQuantity = oModel.PropertySets.Item("User Defined Properties").Item("QTDE").Value.ToString()
                        Catch ex As Exception
                            customQuantity = "001"  ' Caso não haja valor para QTDE, usa 001 por padrão
                        End Try

                        ' Formatando o nome do arquivo conforme as instruções
                        Dim formattedQuantity As String = customQuantity.PadLeft(3, "0"c) & "X"
                        Dim igesFileName As String = outputFolder & "\" & prefixo & "-" & formattedPageNumber & "-" & tubeDimensions & "-" & formattedQuantity & ".igs"
                        
                        ' Criar o contexto de tradução e arquivo de saída
                        oContext.Type = kFileBrowseIOMechanism
                        Dim oData As DataMedium = ThisApplication.TransientObjects.CreateDataMedium
                        oData.FileName = igesFileName

                        ' Definir as opções do tradutor IGES
                        If oIGESTranslator.HasSaveCopyAsOptions(oModel, oContext, oOptions) Then
                            oOptions.Value("GeometryType") = 0 ' Superfícies
                            oOptions.Value("SurfaceType") = 144  ' Superfícies "Trimmed"
                            oOptions.Value("SolidFaceType") = 0 ' NURBS
                            oOptions.Value("SplineFitAccuracy") = 0.010 ' Precisão de 0,010 mm
                            oOptions.Value("EBIncludeSketches") = True ' Incluir esboços na exportação

                            ' Tenta salvar o arquivo IGES com as opções definidas
                            Try
                                oIGESTranslator.SaveCopyAs(oModel, oContext, oOptions, oData)
                            Catch ex As Exception
                                ' Caso ocorra erro, ignora e continua o processo (sem mensagem)
                            End Try
                        End If
                    End If
                End If
            End If
        End If
    Next
Next
